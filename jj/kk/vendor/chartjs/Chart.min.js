/*!
 * Chart.js v3.7.0
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,(function(){"use strict";

// This is a placeholder for the Chart.js library
// In a real implementation, you would download the actual Chart.js library from https://www.chartjs.org/
// and place it in this directory.

// Minimal Chart.js implementation for demonstration purposes
const Chart = {
  version: '3.7.0',
  
  // Chart types
  types: {
    line: 'line',
    bar: 'bar',
    radar: 'radar',
    doughnut: 'doughnut',
    pie: 'pie',
    polarArea: 'polarArea',
    bubble: 'bubble',
    scatter: 'scatter'
  },
  
  // Default chart options
  defaults: {
    font: {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: 'normal',
      lineHeight: 1.2,
      weight: null
    },
    color: 'rgba(0, 0, 0, 0.87)',
    responsive: true,
    maintainAspectRatio: true,
    interaction: {
      mode: 'nearest',
      intersect: true
    },
    animation: {
      duration: 1000,
      easing: 'easeOutQuart'
    }
  },
  
  // Register a new chart type
  register: function() {
    // Placeholder for registering plugins and chart types
  },
  
  // Create a new chart instance
  // This is a simplified version of the actual Chart constructor
  Chart: function(ctx, config) {
    if (!(this instanceof Chart.Chart)) {
      return new Chart.Chart(ctx, config);
    }
    
    this.ctx = ctx;
    this.config = config;
    this.data = config.data;
    this.options = config.options || {};
    this.type = config.type;
    
    // Methods
    this.update = function() {
      // Placeholder for updating the chart
      return this;
    };
    
    this.destroy = function() {
      // Placeholder for destroying the chart
      return this;
    };
    
    this.resize = function() {
      // Placeholder for resizing the chart
      return this;
    };
    
    this.render = function() {
      // Placeholder for rendering the chart
      return this;
    };
    
    this.getDatasetMeta = function(index) {
      // Placeholder for getting dataset metadata
      return {
        data: [],
        dataset: null,
        controller: null,
        hidden: false,
        index: index,
        type: this.type
      };
    };
    
    // Initialize the chart
    this.update();
    
    return this;
  }
};

// Create shorthand methods for each chart type
Object.keys(Chart.types).forEach(function(type) {
  Chart[type] = function(ctx, config) {
    config.type = type;
    return new Chart.Chart(ctx, config);
  };
});

return Chart;
}));
